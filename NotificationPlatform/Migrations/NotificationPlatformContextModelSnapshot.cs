// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotificationPlatform.Data;
using NotificationPlatform.Models.Email;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NotificationPlatform.Migrations
{
    [DbContext(typeof(NotificationPlatformContext))]
    partial class NotificationPlatformContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "email_contact_property_type", new[] { "choice", "date", "number", "string" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("EmailConfigurations");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmailConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailConfigurationId");

                    b.ToTable("EmailContacts");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContactProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmailConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Show")
                        .HasColumnType("boolean");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<EmailContactPropertyType>("Type")
                        .HasColumnType("email_contact_property_type");

                    b.HasKey("Id");

                    b.HasIndex("EmailConfigurationId");

                    b.HasIndex("Type", "Name")
                        .IsUnique();

                    b.ToTable("EmailContactProperties");

                    b.HasDiscriminator<EmailContactPropertyType>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContactPropertyValue", b =>
                {
                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ContactId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("EmailContactPropertyValues");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmailConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailConfigurationId");

                    b.ToTable("EmailSegments");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailTransport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmailConfigurationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailConfigurationId");

                    b.ToTable("EmailTransports");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailTransportSenderAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TransportId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TransportId", "Address")
                        .IsUnique();

                    b.ToTable("EmailTransportSenderAddresses");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Tenant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContactChoiceProperty", b =>
                {
                    b.HasBaseType("NotificationPlatform.Models.Email.EmailContactProperty");

                    b.PrimitiveCollection<string[]>("Choices")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue(EmailContactPropertyType.Choice);
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContactDateProperty", b =>
                {
                    b.HasBaseType("NotificationPlatform.Models.Email.EmailContactProperty");

                    b.HasDiscriminator().HasValue(EmailContactPropertyType.Date);
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContactNumberProperty", b =>
                {
                    b.HasBaseType("NotificationPlatform.Models.Email.EmailContactProperty");

                    b.HasDiscriminator().HasValue(EmailContactPropertyType.Number);
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContactStringProperty", b =>
                {
                    b.HasBaseType("NotificationPlatform.Models.Email.EmailContactProperty");

                    b.HasDiscriminator().HasValue(EmailContactPropertyType.String);
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailConfiguration", b =>
                {
                    b.HasOne("NotificationPlatform.Models.Project", "Project")
                        .WithOne("EmailConfiguration")
                        .HasForeignKey("NotificationPlatform.Models.Email.EmailConfiguration", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContact", b =>
                {
                    b.HasOne("NotificationPlatform.Models.Email.EmailConfiguration", "EmailConfiguration")
                        .WithMany("Contacts")
                        .HasForeignKey("EmailConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailConfiguration");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContactProperty", b =>
                {
                    b.HasOne("NotificationPlatform.Models.Email.EmailConfiguration", "EmailConfiguration")
                        .WithMany("Properties")
                        .HasForeignKey("EmailConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailConfiguration");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContactPropertyValue", b =>
                {
                    b.HasOne("NotificationPlatform.Models.Email.EmailContact", "Contact")
                        .WithMany("Properties")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotificationPlatform.Models.Email.EmailContactProperty", "Property")
                        .WithMany("Values")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailSegment", b =>
                {
                    b.HasOne("NotificationPlatform.Models.Email.EmailConfiguration", "EmailConfiguration")
                        .WithMany("Segments")
                        .HasForeignKey("EmailConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailConfiguration");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailTransport", b =>
                {
                    b.HasOne("NotificationPlatform.Models.Email.EmailConfiguration", "EmailConfiguration")
                        .WithMany("Transports")
                        .HasForeignKey("EmailConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailConfiguration");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailTransportSenderAddress", b =>
                {
                    b.HasOne("NotificationPlatform.Models.Email.EmailTransport", "Transport")
                        .WithMany("SenderAddresses")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailConfiguration", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Properties");

                    b.Navigation("Segments");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContact", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailContactProperty", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Email.EmailTransport", b =>
                {
                    b.Navigation("SenderAddresses");
                });

            modelBuilder.Entity("NotificationPlatform.Models.Project", b =>
                {
                    b.Navigation("EmailConfiguration");
                });
#pragma warning restore 612, 618
        }
    }
}
